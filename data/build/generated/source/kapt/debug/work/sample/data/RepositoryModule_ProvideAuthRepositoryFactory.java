// Generated by Dagger (https://dagger.dev).
package work.sample.data;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import work.sample.data.dataSource.AuthNetworkDataSource;
import work.sample.domain.repository.AuthRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideAuthRepositoryFactory implements Factory<AuthRepository> {
  private final RepositoryModule module;

  private final Provider<AuthNetworkDataSource> authNetworkDataSourceProvider;

  public RepositoryModule_ProvideAuthRepositoryFactory(RepositoryModule module,
      Provider<AuthNetworkDataSource> authNetworkDataSourceProvider) {
    this.module = module;
    this.authNetworkDataSourceProvider = authNetworkDataSourceProvider;
  }

  @Override
  public AuthRepository get() {
    return provideAuthRepository(module, authNetworkDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideAuthRepositoryFactory create(RepositoryModule module,
      Provider<AuthNetworkDataSource> authNetworkDataSourceProvider) {
    return new RepositoryModule_ProvideAuthRepositoryFactory(module, authNetworkDataSourceProvider);
  }

  public static AuthRepository provideAuthRepository(RepositoryModule instance,
      AuthNetworkDataSource authNetworkDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideAuthRepository(authNetworkDataSource));
  }
}
