// Generated by Dagger (https://dagger.dev).
package work.sample.auth.phone.ui;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import work.sample.auth.phone.PhoneStore;
import work.sample.navigation.Router;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PhoneViewModel_Factory implements Factory<PhoneViewModel> {
  private final Provider<PhoneStore> storeProvider;

  private final Provider<Router> routerProvider;

  public PhoneViewModel_Factory(Provider<PhoneStore> storeProvider,
      Provider<Router> routerProvider) {
    this.storeProvider = storeProvider;
    this.routerProvider = routerProvider;
  }

  @Override
  public PhoneViewModel get() {
    PhoneViewModel instance = newInstance();
    PhoneViewModel_MembersInjector.injectStore(instance, storeProvider.get());
    PhoneViewModel_MembersInjector.injectRouter(instance, routerProvider.get());
    return instance;
  }

  public static PhoneViewModel_Factory create(Provider<PhoneStore> storeProvider,
      Provider<Router> routerProvider) {
    return new PhoneViewModel_Factory(storeProvider, routerProvider);
  }

  public static PhoneViewModel newInstance() {
    return new PhoneViewModel();
  }
}
