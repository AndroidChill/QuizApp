// Generated by Dagger (https://dagger.dev).
package work.sample.auth.phone.ui;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import work.sample.auth.phone.PhoneStore;
import work.sample.navigation.Router;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PhoneViewModel_MembersInjector implements MembersInjector<PhoneViewModel> {
  private final Provider<PhoneStore> storeProvider;

  private final Provider<Router> routerProvider;

  public PhoneViewModel_MembersInjector(Provider<PhoneStore> storeProvider,
      Provider<Router> routerProvider) {
    this.storeProvider = storeProvider;
    this.routerProvider = routerProvider;
  }

  public static MembersInjector<PhoneViewModel> create(Provider<PhoneStore> storeProvider,
      Provider<Router> routerProvider) {
    return new PhoneViewModel_MembersInjector(storeProvider, routerProvider);
  }

  @Override
  public void injectMembers(PhoneViewModel instance) {
    injectStore(instance, storeProvider.get());
    injectRouter(instance, routerProvider.get());
  }

  @InjectedFieldSignature("work.sample.auth.phone.ui.PhoneViewModel.store")
  public static void injectStore(PhoneViewModel instance, PhoneStore store) {
    instance.store = store;
  }

  @InjectedFieldSignature("work.sample.auth.phone.ui.PhoneViewModel.router")
  public static void injectRouter(PhoneViewModel instance, Router router) {
    instance.router = router;
  }
}
