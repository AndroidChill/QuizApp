// Generated by view binder compiler. Do not edit!
package work.sample.auth.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import work.sample.auth.R;

public final class FragmentPinCodeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton button0;

  @NonNull
  public final MaterialButton button1;

  @NonNull
  public final MaterialButton button2;

  @NonNull
  public final MaterialButton button3;

  @NonNull
  public final MaterialButton button4;

  @NonNull
  public final MaterialButton button5;

  @NonNull
  public final MaterialButton button6;

  @NonNull
  public final MaterialButton button7;

  @NonNull
  public final MaterialButton button8;

  @NonNull
  public final MaterialButton button9;

  @NonNull
  public final ImageButton buttonBiometrics;

  @NonNull
  public final ImageView buttonDelNum;

  @NonNull
  public final ImageView imageView3;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final ShapeableImageView point1;

  @NonNull
  public final ShapeableImageView point2;

  @NonNull
  public final ShapeableImageView point3;

  @NonNull
  public final ShapeableImageView point4;

  @NonNull
  public final LinearLayout progressCircular;

  @NonNull
  public final MaterialTextView text;

  private FragmentPinCodeBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton button0, @NonNull MaterialButton button1,
      @NonNull MaterialButton button2, @NonNull MaterialButton button3,
      @NonNull MaterialButton button4, @NonNull MaterialButton button5,
      @NonNull MaterialButton button6, @NonNull MaterialButton button7,
      @NonNull MaterialButton button8, @NonNull MaterialButton button9,
      @NonNull ImageButton buttonBiometrics, @NonNull ImageView buttonDelNum,
      @NonNull ImageView imageView3, @NonNull LinearLayout linearLayout,
      @NonNull ShapeableImageView point1, @NonNull ShapeableImageView point2,
      @NonNull ShapeableImageView point3, @NonNull ShapeableImageView point4,
      @NonNull LinearLayout progressCircular, @NonNull MaterialTextView text) {
    this.rootView = rootView;
    this.button0 = button0;
    this.button1 = button1;
    this.button2 = button2;
    this.button3 = button3;
    this.button4 = button4;
    this.button5 = button5;
    this.button6 = button6;
    this.button7 = button7;
    this.button8 = button8;
    this.button9 = button9;
    this.buttonBiometrics = buttonBiometrics;
    this.buttonDelNum = buttonDelNum;
    this.imageView3 = imageView3;
    this.linearLayout = linearLayout;
    this.point1 = point1;
    this.point2 = point2;
    this.point3 = point3;
    this.point4 = point4;
    this.progressCircular = progressCircular;
    this.text = text;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPinCodeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPinCodeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_pin_code, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPinCodeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_0;
      MaterialButton button0 = ViewBindings.findChildViewById(rootView, id);
      if (button0 == null) {
        break missingId;
      }

      id = R.id.button_1;
      MaterialButton button1 = ViewBindings.findChildViewById(rootView, id);
      if (button1 == null) {
        break missingId;
      }

      id = R.id.button_2;
      MaterialButton button2 = ViewBindings.findChildViewById(rootView, id);
      if (button2 == null) {
        break missingId;
      }

      id = R.id.button_3;
      MaterialButton button3 = ViewBindings.findChildViewById(rootView, id);
      if (button3 == null) {
        break missingId;
      }

      id = R.id.button_4;
      MaterialButton button4 = ViewBindings.findChildViewById(rootView, id);
      if (button4 == null) {
        break missingId;
      }

      id = R.id.button_5;
      MaterialButton button5 = ViewBindings.findChildViewById(rootView, id);
      if (button5 == null) {
        break missingId;
      }

      id = R.id.button_6;
      MaterialButton button6 = ViewBindings.findChildViewById(rootView, id);
      if (button6 == null) {
        break missingId;
      }

      id = R.id.button_7;
      MaterialButton button7 = ViewBindings.findChildViewById(rootView, id);
      if (button7 == null) {
        break missingId;
      }

      id = R.id.button_8;
      MaterialButton button8 = ViewBindings.findChildViewById(rootView, id);
      if (button8 == null) {
        break missingId;
      }

      id = R.id.button_9;
      MaterialButton button9 = ViewBindings.findChildViewById(rootView, id);
      if (button9 == null) {
        break missingId;
      }

      id = R.id.button_biometrics;
      ImageButton buttonBiometrics = ViewBindings.findChildViewById(rootView, id);
      if (buttonBiometrics == null) {
        break missingId;
      }

      id = R.id.button_del_num;
      ImageView buttonDelNum = ViewBindings.findChildViewById(rootView, id);
      if (buttonDelNum == null) {
        break missingId;
      }

      id = R.id.imageView3;
      ImageView imageView3 = ViewBindings.findChildViewById(rootView, id);
      if (imageView3 == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.point1;
      ShapeableImageView point1 = ViewBindings.findChildViewById(rootView, id);
      if (point1 == null) {
        break missingId;
      }

      id = R.id.point2;
      ShapeableImageView point2 = ViewBindings.findChildViewById(rootView, id);
      if (point2 == null) {
        break missingId;
      }

      id = R.id.point3;
      ShapeableImageView point3 = ViewBindings.findChildViewById(rootView, id);
      if (point3 == null) {
        break missingId;
      }

      id = R.id.point4;
      ShapeableImageView point4 = ViewBindings.findChildViewById(rootView, id);
      if (point4 == null) {
        break missingId;
      }

      id = R.id.progress_circular;
      LinearLayout progressCircular = ViewBindings.findChildViewById(rootView, id);
      if (progressCircular == null) {
        break missingId;
      }

      id = R.id.text;
      MaterialTextView text = ViewBindings.findChildViewById(rootView, id);
      if (text == null) {
        break missingId;
      }

      return new FragmentPinCodeBinding((ConstraintLayout) rootView, button0, button1, button2,
          button3, button4, button5, button6, button7, button8, button9, buttonBiometrics,
          buttonDelNum, imageView3, linearLayout, point1, point2, point3, point4, progressCircular,
          text);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
