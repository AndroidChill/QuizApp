// Generated by Dagger (https://dagger.dev).
package work.sample.core.mvi;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import work.sample.core.UseCase;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Store_Factory<S extends State, A extends Action, N extends News> implements Factory<Store<S, A, N>> {
  private final Provider<UseCase> useCaseProvider;

  public Store_Factory(Provider<UseCase> useCaseProvider) {
    this.useCaseProvider = useCaseProvider;
  }

  @Override
  public Store<S, A, N> get() {
    return newInstance(useCaseProvider.get());
  }

  public static <S extends State, A extends Action, N extends News> Store_Factory<S, A, N> create(
      Provider<UseCase> useCaseProvider) {
    return new Store_Factory<S, A, N>(useCaseProvider);
  }

  public static <S extends State, A extends Action, N extends News> Store<S, A, N> newInstance(
      UseCase useCase) {
    return new Store<S, A, N>(useCase);
  }
}
